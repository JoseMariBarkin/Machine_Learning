summary(regrline)
summary(regrline)
summary(regrline)
library(UsingR)
data(diamond)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 1.1, pch = 21, frame = FALSE)
abline(lm(price ~ carat, data = diamond), lwd = 2)
fit <- lm(price ~ carat, data = diamond)
coef(fit)
fit2 <- lm(price ~ I(carat- mean(carat)), data = diamond)
coef(fit2)
library(swirl)
swirl()
library(swirl)
swirl/()
swirl()
cor(mean(gpa_nor)/sd(gpa_nor))
mean(gpa_nor)
cor(gpa_nor,gch_nor)
l_nor <- lm(galton$child ~ galton$parent, galton)
l_nor <- lm(gch_nor ~ gpa_nor)
library(swirl)
swirl()
fit <- lm(child ~ parent, galton)
sum((sqrt(fit$residuals)/(n-2))
)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child + galton$parent)
mu <- mean(galton$child)
sTot <- sqrt(mu)
sTot <- sum((galton$child-mu)^2)
sRes <- deviance(sum((galton$child-mu)^2))
sRes <- deviance(sTot)
info()
sRes
4
sRes <- deviance(fit)
(sRes/sTot)-1
1-sRes/sTot
sqrt(summary(fit)$r)
summary(fit)$r
summary(fit)$r.squared
cor(galton$child, galton$parent)
cor(galton$parent,galton$child)^2
swirl()
library(swirl
)
swirl()
ones <-(1, nrow(galton))
ones <-rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~ parent, galton)
lm(child ~ 1, galton)
view(trees)
head(trees)
fit <- lm(volume ~ girth + height + Constant -1)
fit <- lm(volume ~ girth + height + Constant -1, trees)
fit <- lm(Volume ~ girth + height + Constant -1, trees)
fit <- lm(Volume ~ Girth + height + Constant -1, trees)
fit <- lm(Volume ~ Girth + Height + Constant -1, trees)
tree2 <- eliminate("Girth", trees)
trees2 <- eliminate("Girth", trees)
Vire(trees2)
Viwe(trees2)
View(trees2)
fit2 <- lm(Volume ~ Height + Constant -1, trees2)
lapply(list(fit, fit2), coef)
all.swiss
all.swiss()
lm(Catholic~ Fertility, swiss)
all <- lm(Fertility ~ ., swiss)
all
summary(all)
summary(lm(Fertility ~ Agriculture, swiss))
cor(Examination, Education)
cor(Examination, Education)
?
cor(Fertility, Agriculture)
1+1
cor(swiss.Examination, swiss.Education)
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- sum(swiss$Examination, swiss$Catholic)
ec <- swiss$Examination, swiss$Catholic
ec <- Swiss$Examination, Swiss$Catholic
ec <- swiss$Examination+swiss$Catholic
efit <- swiss$Examination+swiss$Catholic
1+1
swirl()
swirl()
library(datasets)
data(swiss); par(mfrow = c(2,2))
fit <- lm(Fertility ~ ., data = swiss); plot(fit)
library(datasets)
data(mtcars)
with(mtcars, table(cyl))
with(mtcars, table(am))
library(datasets)
data(mtcars)
names(mtcars)
summary(mtcars)
table(mtcars)
mtcars
mtcars
size(mtcars)
length(mtcars)
length(mtcars,)
dim(mtcars)
mtcars$am <- as.factor(mtcars$am)
levels(mtcars$am) <- c("Automatic", "Manual"
)
mtcars
library(datasets)
par(mfrow = c(1, 2))
with(mtcars, boxplot(mpg/10, disp/50, hp/50, drat, wt, qsec/5, main = "Scaled boxplots; mtcars"),
xlab = "Continuous variable", ylab = "Scale (adjusted to allow simultaneous display")
axisnames <- c("MPG/10", "DISP/50", "HP/50", "drat", "wt", "qsec/5")
axis(1, at = c(1, 2, 3, 4, 5, 6), labels = axisnames, las = 2, cex.axis = 0.9,
tck = -0.01)
pairs(mtcars)
par(mfrow = c(1, 2))
with(mtcars, boxplot(mpg/10, disp/50, hp/50, drat, wt, qsec/5, main = "Scaled boxplots; mtcars"),
xlab = "Continuous variable", ylab = "Scale (adjusted to allow simultaneous display")
axisnames <- c("MPG/10", "DISP/50", "HP/50", "drat", "wt", "qsec/5")
axis(1, at = c(1, 2, 3, 4, 5, 6), labels = axisnames, las = 2, cex.axis = 0.9,
tck = -0.01)
pairs(mtcars)
par(mfrow = c(1, 2))
with(mtcars, boxplot(mpg/10, disp/50, hp/50, drat, wt, qsec/5, main = "Scaled boxplots; mtcars"),
xlab = "Continuous variable", ylab = "Scale (adjusted to allow simultaneous display")
axisnames <- c("MPG/10", "DISP/50", "HP/50", "drat", "wt", "qsec/5")
axis(1, at = c(1, 2, 3, 4, 5, 6), labels = axisnames, las = 2, cex.axis = 0.9,
tck = -0.01)
pairs(mtcars)
par(mfrow = c(1, 2))
with(mtcars, boxplot(mpg/10, disp/50, hp/50, drat, wt, qsec/5, main = "Scaled boxplots; mtcars"),
xlab = "Continuous variable", ylab = "Scale (adjusted to allow simultaneous display")
axisnames <- c("MPG/10", "DISP/50", "HP/50", "drat", "wt", "qsec/5")
axis(1, at = c(1, 2, 3, 4, 5, 6), labels = axisnames, las = 2, cex.axis = 0.9,
tck = -0.01)
pairs(mtcars)
data(mtcars)
par(mfrow = c(1, 2))
with(mtcars, boxplot(mpg/10, disp/50, hp/50, drat, wt, qsec/5, main = "Scaled boxplots; mtcars"),
xlab = "Continuous variable", ylab = "Scale (adjusted to allow simultaneous display")
axisnames <- c("MPG/10", "DISP/50", "HP/50", "drat", "wt", "qsec/5")
axis(1, at = c(1, 2, 3, 4, 5, 6), labels = axisnames, las = 2, cex.axis = 0.9,
tck = -0.01)
pairs(mtcars)
par(mfrow = c(1, 2))
with(mtcars, boxplot(mpg/10, disp/50, hp/50, drat, wt, qsec/5, main = "Scaled boxplots; mtcars"),
xlab = "Continuous variable", ylab = "Scale (adjusted to allow simultaneous display")
axisnames <- c("MPG/10", "DISP/50", "HP/50", "drat", "wt", "qsec/5")
axis(1, at = c(1, 2, 3, 4, 5, 6), labels = axisnames, las = 2, cex.axis = 0.9,
tck = -0.01)
pairs(mtcars)
DISP/50
?
names(spray)
names(sprays)
InsectSprays
()
InsectSprays()
InsectSprays
InsectSprays
InsectSprays
library(ggplot2) # CONTAINS DATASET
library(Hmisc) # contents() and describe() functions: better than summary() function
help(mtcars)
mtcars$ransmissions.type
mtcars$transmissions.type
mtcars$transmission.type
mtcars$transmission.type <- ifelse(mtcars$am==0, "automatic", "manual")
contens(mtcars)
contents(mtcars)
table(mtcars$transmission.type)
table(paste(mtcars$cyl, "cylindors:"), mtcars$transmission.type)
ggplot(mtcars, main="Figure 0", aes(x=cyl,y=mpg)) + facet_wrap(~cyl) +
geom_boxplot(aes(fill = transmission.type))
qplot(hp, mpg, data=mtcars, facets= . ~ transmission.type,
xlab="Engine Strength [Horsepower]", ylab="Fuel efficiency [Miles / Gallon]",
geom=c("point", "smooth"), alpha = I(0.2),
method="lm", formula=y~poly(x,2),ylim=c(0,40),
main=c("FIGURE 1: Fuel efficiency [L / 100km] of cars by transmission type") )
mtcars$l.per.100.km <- 100/(mtcars$mpg * (1/3.78) * 1.609344) #
qplot(hp, l.per.100.km, data=mtcars, facets= . ~ transmission.type,
xlab="Engine Strength [Horsepower]", ylab="Fuel consumption [l / 100 km]",
geom=c("point", "smooth"), method="lm", ylim=c(0,40),
main=c("FIGURE 2: Fuel consumption [L / 100km] of cars by transmission type"))
m0 <- lm(l.per.100.km ~ hp, data=mtcars[mtcars$am == 0,])
m1 <- lm(l.per.100.km ~ hp, data=mtcars[mtcars$am == 1,])
m0
m1
qplot(wt * 1000, l.per.100.km, data=mtcars, facets= . ~ transmission.type,
xlab="Car weight [Pounds]", ylab="Fuel consuption [l / 100 km]",
geom=c("point", "smooth"), alpha = I(0.2), method="lm",ylim=c(0,25),
main=c("Figure 3: Fuel consumption [l / 100 km] of cars by weight and transmission type") )
ma1 <- lm(l.per.100.km ~ factor(transmission.type) , data=mtcars)
lkm <-round( coef(ma1)[[2]], 1)
coef(ma1)
par(mfrow=c(1,2))
plot(mtcars[mtcars$am == 0,]$hp, resid(m0),
ylab=c("Residuals for linear model 'l.per.100.km ~ hp'"), xlab="Horsepower",
xlim=c(0,300), main= " automatic")
abline(h=0)
plot(mtcars[mtcars$am == 1,]$hp, resid(m1),
ylab=c("Residuals for linear model 'l.per.100.km ~ hp'"),
xlab="Horsepower", xlim=c(0,300),main= "manual")
abline(h=0)
df <- data.frame(hatvalue= hatvalues(m0), tm="automatic")
df2 <- data.frame(hatvalue=hatvalues(m1), tm="manual")
df3 <- rbind(df, df2)
head(df3[order(df3$hatvalue, decreasing=T),])
ma1 <- lm(l.per.100.km ~ factor(transmission.type) , data=mtcars)
ma2 <- update(ma1, l.per.100.km ~ hp)
ma3 <- update(ma1, l.per.100.km ~ hp + wt)
anova(ma1, ma2, ma3)
data(mtcars)
mtcars$am = as.factor(mtcars$am)
levels(mtcars$am) = c("Automatic", "Manual")
par(mfrow=c(1,2))
m = mtcars$mpg
h = hist(m, breaks=10, col="darkblue", xlab="Miles Per Gallon", main="Miles Per Gallon, by freq
uency")
xfit = seq(min(m), max(m), length = 40)
yfit = dnorm(xfit, mean = mean(m), sd = sd(m))
yfit = yfit * diff(h$mids[1:2]) * length(m)
lines(xfit, yfit, col="grey", lwd = 6)
d = density(mtcars$mpg)
plot(d, xlab="Miles Per Gallon", main="Miles Per Gallon, by density")
boxplot(mpg ~ am, mtcars,
col = c("dark green", "green"),
xlab = "Trasmission", ylab= "Miles Per Gallon",
main="MPG by Transmission Type")
library(swirl)
swirl()
dim(hunger)
3
948
names(hunger)
fit <- lm(hunger$Numeric ~ hunger$Year")
fit <- lm(hunger$Numeric ~ hunger$Year", hunger)
fit <- lm(hunger$Numeric ~ hunger$Year, hunger)
summary(fit)
summary(fit)$coef
lmF <- lm()
2+2
lmF <- lm(Numeric[Sex=="Female"] ~ Year[Sex=="Female"],hunger)
lmM <- lm(Numeric[Sex=="Male"] ~ Year[Sex=="Male"],hunger)
2+2
lmBoth <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex)
summary(lmBoth)
2+2
lmInter <- lm(hunger$Numeric ~ hunger$Year + hunger$Sex + hunger$Year * hunger$Sex)
summary(lmInter)
fit <- lm(y ~ x, out2)
plot(fit, which=1)
fitno <- lm(y ~ x, out2)
fitno <- lm(y ~ x, out2[-1,])
2+2
plot(fitno, which=1)
2+2
coef(fit)-coef(fitno)
View(dfbeta(fit))
resno <- out2[1, "y"] - predict(fitno, out2[1,])
1-resid(fit)[1]/resno
head(hatvalues(fit))
2
sigma <- sqrt(deviance(fit)/df.residual(fit))
sigma <- sqrt(deviance(fit)/df.residual(fit)/sigma*sqrt(1-hatvalues(fit)))
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
Wiew(cbind(rstd, rstandard(fit)))
Wiev(cbind(rstd, rstandard(fit)))
View(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
2
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
sigma1 * sqrt(1-hatvalues(fit)[1])
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
View(rstudent(fit))
2
dy <- predict(fitno, out2)-predict(fit, out2)
2
sum(dy^2)/(2*sigma^2)
plot(fit, which=5)
swirl()
rgp1()
rgp2()
View(swiss)
2
mdl <- lm(Fertility ~ ., swiss)
vif(mdl)
mdl2 <- lm(Fertility ~ ., swiss)
mdl2 <- lm(Fertility ~ . -Examination, swiss)
vif(mdl2)
swirl()
2
x1c <- simbias()
apply(x1c, 1, mean)
2
fit1 <- lm(Fertility ~ Agriculture, swiss)
fit3 <- lm(Fertility ~ Agriculture + Examination + Education, swiss)
anova(fit1, fit3)
2
deviance(fit3)
d <- deviance(fit3)/43
n <- deviance(fit1)-deviance(fit3)
n <- (deviance(fit1) - deviance(fit3))/2
n/d
2
pf(n/d, 2, 43, lower.tail=FALSE)
2
shapiro.test(fit3$residuals)
anova(fit1, fit3, fit5, fit6)
swirl()
library(swirl)
swirl()
View(ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, family, ravenData)
mdl <- glm(ravenWinNum ~ ravenScore, "family", ravenData)
2
mdl <- glm(ravenWinNum ~ ravenScore, binomial, ravenData)
lodds <- predict(mdl, data.frame(ravenScore=c(0, 3, 6))
)
exp(lodds)/(1+exp(lodds))
summary(mdl)
case exp(b1) = exp(0.10658) = 1.11
2
exp(confint(mdl))
anova(mdl)
2
qchisq(0.95, 1)
var(rpois(1000, 50))
plot.new()
swirl()
nxt()
View(hits)
class(hits[,'date'])
as.integer(head(hits[,'date']))
mdl <- glm(visits ~ date, poisson, hits)
summary(mdl)
confint(mdl, 'date')
exp(confint(mdl, 'date'))
which.max(hits[,'visits']
)
hits[704,]
lambda <- mdl$fitted.values[704]
qpois(.95, lambda)
2
mdl2 <- glm(formula = simplystats ~ date, family = poisson, data = hits, offset = log(visits + 1))
qpois(.95, mdl2$fitted.values[704])
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
testing
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p = 0.50)
training = adData[trainIndex,]
testing = adData[-trainIndex,]
testing
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
library(pgmm)
data(olive)
olive = olive[,-1]
library(datasets)
library(pgmm)
data(olive)
olive = olive[,-1]
library(datasets)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
olive
newdata = as.data.frame(t(colMeans(olive)))
newdata
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2
TotalIntench2 = 23; FiberWidthCh1 = 10; PerimStatusCh1=2
TotalIntench2
TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100
TotalIntench2 = 50.000; FiberWidthCh1 = 10;VarIntenCh4 = 100
TotalIntench2
TotalIntench2 = 57000; FiberWidthCh1 = 8;VarIntenCh4 = 100
TotalIntench2
FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2
FiberWidthCh1
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
pwd()
pwd
swd()
wd()
getwd()
trainURL<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
summary(trainURL)
trainURL<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
trainURL
trainURL<-https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
trainURL<-https:/d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
trainURL<-https:/d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv
trainURL<-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testURL <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(trainURL, "pml-training.csv",  method="curl")
read.csv(trainURL)
getwd()
getwd()
setwd("C:/Users/Jose Mari/Desktop/R/report assig")
training <- read.csv("pml-training.csv",na.strings=c("NA",""))
training
getwd()
setwd("C:/Users/Jose Mari/Desktop/M_L_Pro")
getwd()
trainURL<-'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
testURL <-'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv'
download.file(trainURL, "pml-training.csv",  method="curl")
library(RCurl)
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
x <- getURL(URL)
trainURL<-'https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv'
x <- getURL(trainURL)
download.file(trainURL, "pml-training.csv",  method="curl")
training <- read.csv("pml-training.csv",na.strings=c("NA",""))
trainin
training <- read.csv("pml-training.csv",na.strings=c("NA",""))
training
getwd()
training <- read.csv("pml-training.csv",na.strings=c("NA",""))
training
training <- read.csv("pml-training.csv",na.strings=c("NA",""))
getwd()
training <- read.csv("pml-training.csv",na.strings=c("NA",""))
trainingx <- read.csv("pml-training.csv",na.strings=c("NA",""))
trainingx
install.packages("randomForest")
model <- train(trainingdata$classe ~., data = trainingdata, method = "rf", prox = TRUE, trControl=trainControl(method = "cv",numbe = 4,allowParallel=TRU
E))
training <- read.csv("pml-training.csv",na.strings=c("NA",""))
testing <-read.csv("pml-testing.csv",na.strings=c("NA",""))
sum(is.na(training))
na_train <- sapply(training, function(x) {sum(is.na(x))})
table(na_train)
na_test = sapply(testing, function(x) {sum(is.na(x))})
table(na_test)
columnNACounts <- colSums(is.na(training))
badColumns <- columnNACounts >= 19000
cleanTrainingdata <- training[!badColumns]
sum(is.na(cleanTrainingdata))
cleanTrainingdata <- cleanTrainingdata[, c(7:60)]
columnNACounts <- colSums(is.na(testing))
badColumns <- columnNACounts >= 20
cleanTestingdata <- testing[!badColumns]
sum(is.na(cleanTestingdata))
cleanTestingdata <- cleanTestingdata[, c(7:60)]
summary(cleanTrainingdata$classe)
plot(cleanTrainingdata$classe,col=c("green", "purple", "orange", "blue", "yellow"),main = "`frequency", xlab = "Types of Weight Lifting Exercices")
library (caret)
inTrain <- createDataPartition(y=cleanTrainingdata$classe, p=0.6, list=FALSE)
trainingdata <- cleanTrainingdata[inTrain,]
testingdata <- cleanTrainingdata[-inTrain,]
dim(trainingdata)
model <- train(trainingdata$classe ~., data = trainingdata, method = "rf", prox = TRUE, trControl=trainControl(method = "cv",numbe = 4,allowParallel=TRUE))
model <- train(trainingdata$classe ~., data = trainingdata, method = "rf", prox = TRUE, trControl=trainControl(method = "cv",numbe = 4,allowParallel=TRUE))
model
library(randomForest)
model <- train(trainingdata$classe ~., data = trainingdata, method = "rf", prox = TRUE, trControl=trainControl(method = "cv",numbe = 4,allowParallel=TRUE))
